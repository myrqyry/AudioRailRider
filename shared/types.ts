
import { Vector3 } from 'three';

// An individual segment of the rollercoaster track as defined by the AI
export interface TrackSegment {
  component: 'climb' | 'drop' | 'turn' | 'loop' | 'barrelRoll';
  angle?: number;
  length?: number;
  direction?: 'left' | 'right';
  radius?: number;
  rotations?: number;
  intensity?: number; // 0-100, influences visual effects
  lightingEffect?: string; // e.g., "strobe", "fade", "pulse"
  environmentChange?: string; // e.g., "tunnel", "space", "underwater"
  audioSyncPoint?: number; // timestamp within the segment for key audio event
}

// The full blueprint for the ride, generated by Gemini
export interface RideBlueprint {
  palette: string[];
  track: TrackSegment[];
  rideName: string; // A creative name for the rollercoaster
  moodDescription: string; // A text description of the overall mood/theme
}

// Represents the application's current state in its lifecycle
export enum AppStatus {
  Idle = 'IDLE',
  Analyzing = 'ANALYZING',
  Generating = 'GENERATING',
  Ready = 'READY',
  Riding = 'RIDING',
  Finished = 'FINISHED',
  Error = 'ERROR',
}

// Processed data ready for building the 3D track in Three.js
export interface TrackData {
    path: Vector3[];
    upVectors: Vector3[]; // Crucial for handling barrel rolls correctly
    railColor: string;
    glowColor: string;
    skyColor1: string;
    skyColor2: string;
    // New properties for enhanced rendering/effects
    segmentDetails: {
      intensity?: number;
      lightingEffect?: string;
      environmentChange?: string;
      audioSyncPoint?: number;
    }[]; // Array to hold details for each track segment
    rideName: string;
    moodDescription: string;
}

export interface AudioFeatures {
 duration: number;
 bpm: number;
 energy: number;
 spectralCentroid: number;
 spectralFlux: number;
}