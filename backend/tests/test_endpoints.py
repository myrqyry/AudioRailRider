import pytest
from fastapi.testclient import TestClient
from main import app
from unittest.mock import patch, AsyncMock

client = TestClient(app)

@pytest.fixture
def mock_track_generator_service():
    """Mocks the TrackGeneratorService for blueprint generation tests."""
    with patch('app.api.endpoints.TrackGeneratorService') as mock_service_class:
        # Configure the instance that will be created
        mock_instance = mock_service_class.return_value

        # Mock the async method `generate_full_blueprint`
        mock_instance.generate_full_blueprint = AsyncMock(return_value={
            "blueprint": {
                "rideName": "Mocked Ride",
                "moodDescription": "A ride generated by a mock.",
                "palette": ["#111", "#222", "#333"],
                "track": [
                    {"component": "climb", "length": 50, "angle": 15},
                    {"component": "drop", "length": 100, "angle": -30}
                ]
            },
            "features": {"duration": 120, "bpm": 120}
        })
        yield mock_service_class

def test_generate_blueprint_success(mock_track_generator_service):
    """
    Tests successful blueprint generation with a valid audio file.
    """
    audio_content = b"fake mp3 data"
    files = {'audio_file': ('test.mp3', audio_content, 'audio/mpeg')}
    response = client.post("/api/generate-blueprint", files=files)

    assert response.status_code == 200
    json_response = response.json()
    assert json_response["blueprint"]["rideName"] == "Mocked Ride"
    assert len(json_response["blueprint"]["track"]) == 2
    mock_track_generator_service.return_value.generate_full_blueprint.assert_called_once()

def test_generate_blueprint_invalid_mime_type(mock_track_generator_service):
    """
    Tests that the endpoint rejects an unsupported MIME type.
    """
    audio_content = b"fake txt data"
    files = {'audio_file': ('test.txt', audio_content, 'text/plain')}
    response = client.post("/api/generate-blueprint", files=files)
    assert response.status_code == 400
    assert "Unsupported file format" in response.json()["detail"]

def test_generate_blueprint_file_too_large(mock_track_generator_service):
    """
    Tests that the endpoint rejects a file that exceeds the maximum size limit.
    """
    # Assuming MAX_FILE_SIZE is 20MB in settings
    large_content = b"a" * (20 * 1024 * 1024 + 1)
    files = {'audio_file': ('large_file.mp3', large_content, 'audio/mpeg')}
    response = client.post("/api/generate-blueprint", files=files)
    assert response.status_code == 413
    assert "File size exceeds limit" in response.json()["detail"]

def test_generate_blueprint_no_file():
    """
    Tests that the endpoint returns a 422 Unprocessable Entity if no file is provided.
    """
    response = client.post("/api/generate-blueprint")
    assert response.status_code == 422  # FastAPI's standard response for a missing required file